// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace BookerApiTest.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Booking IDs API")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("GetBookingIds")]
    public partial class BookingIDsAPIFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "GetBookingIds"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Booking IDs API", "    As an API consumer\r\n    I want to retrieve booking IDs with various filters\r\n" +
                "    So I can find specific bookings efficiently", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GetBookingIds.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get booking IDs with valid parameters - Happy Path")]
        [NUnit.Framework.CategoryAttribute("GetBookingIds")]
        [NUnit.Framework.CategoryAttribute("HappyPath")]
        [NUnit.Framework.TestCaseAttribute("Name filter only", "Sally", "Brown", "", "", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Date filter only", "", "", "2014-03-13", "2014-05-21", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Combined name+date", "Sally", "Brown", "2014-03-13", "2014-05-21", "200", null)]
        [NUnit.Framework.TestCaseAttribute("without parms", "", "", "", "", "200", null)]
        public async global::System.Threading.Tasks.Task GetBookingIDsWithValidParameters_HappyPath(string testCase, string firstname, string lastname, string checkin, string checkout, string expectedStatus, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetBookingIds",
                    "HappyPath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("testCase", testCase);
            argumentsOfScenario.Add("firstname", firstname);
            argumentsOfScenario.Add("lastname", lastname);
            argumentsOfScenario.Add("checkin", checkin);
            argumentsOfScenario.Add("checkout", checkout);
            argumentsOfScenario.Add("expectedStatus", expectedStatus);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get booking IDs with valid parameters - Happy Path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Parameter",
                            "Value"});
                table5.AddRow(new string[] {
                            "firstname",
                            string.Format("{0}", firstname)});
                table5.AddRow(new string[] {
                            "lastname",
                            string.Format("{0}", lastname)});
                table5.AddRow(new string[] {
                            "checkin",
                            string.Format("{0}", checkin)});
                table5.AddRow(new string[] {
                            "checkout",
                            string.Format("{0}", checkout)});
#line 9
    await testRunner.WhenAsync("I request booking IDs with parameters", ((string)(null)), table5, "When ");
#line hidden
#line 15
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get booking IDs with edge case parameters")]
        [NUnit.Framework.CategoryAttribute("GetBookingIds")]
        [NUnit.Framework.CategoryAttribute("EdgeCases")]
        [NUnit.Framework.TestCaseAttribute("Invalid date format", "2023/02/28", "2023/03/01", "200", "not contain", null)]
        [NUnit.Framework.TestCaseAttribute("Checkout before checkin", "2023-03-01", "2023-02-28", "200", "not contain", null)]
        [NUnit.Framework.TestCaseAttribute("future dates", "2030-01-01", "2030-01-10", "200", "contain", null)]
        [NUnit.Framework.TestCaseAttribute("Far past dates", "2000-01-01", "2000-01-10", "200", "contain", null)]
        [NUnit.Framework.TestCaseAttribute("Single day stay", "2023-02-28", "2023-02-28", "200", "contain", null)]
        [NUnit.Framework.TestCaseAttribute("Maximum date range", "2010-01-01", "2030-12-31", "200", "contain", null)]
        public async global::System.Threading.Tasks.Task GetBookingIDsWithEdgeCaseParameters(string testCase, string checkin, string checkout, string expectedStatus, string containOrNot, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetBookingIds",
                    "EdgeCases"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("testCase", testCase);
            argumentsOfScenario.Add("checkin", checkin);
            argumentsOfScenario.Add("checkout", checkout);
            argumentsOfScenario.Add("expectedStatus", expectedStatus);
            argumentsOfScenario.Add("containOrNot", containOrNot);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get booking IDs with edge case parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Parameter",
                            "Value"});
                table6.AddRow(new string[] {
                            "checkin",
                            string.Format("{0}", checkin)});
                table6.AddRow(new string[] {
                            "checkout",
                            string.Format("{0}", checkout)});
#line 27
    await testRunner.WhenAsync("I request booking IDs with parameters", ((string)(null)), table6, "When ");
#line hidden
#line 31
    await testRunner.ThenAsync(string.Format("the response status code should be {0}", expectedStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get booking IDs with special characters")]
        [NUnit.Framework.CategoryAttribute("GetBookingIds")]
        [NUnit.Framework.CategoryAttribute("SpecialCharacters")]
        [NUnit.Framework.TestCaseAttribute("Hyphenated name", "Anne-Marie", "O\'Connor", null)]
        [NUnit.Framework.TestCaseAttribute("Accented characters", "Jos�", "Mu�oz", null)]
        [NUnit.Framework.TestCaseAttribute("Space in name", "Mary Jane", "Parker Smith", null)]
        [NUnit.Framework.TestCaseAttribute("Numbers in name", "Agent", "007", null)]
        [NUnit.Framework.TestCaseAttribute("Special chars", "Johnny#", "$mith", null)]
        public async global::System.Threading.Tasks.Task GetBookingIDsWithSpecialCharacters(string testCase, string firstname, string lastname, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetBookingIds",
                    "SpecialCharacters"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("testCase", testCase);
            argumentsOfScenario.Add("firstname", firstname);
            argumentsOfScenario.Add("lastname", lastname);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get booking IDs with special characters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Parameter",
                            "Value"});
                table7.AddRow(new string[] {
                            "firstname",
                            string.Format("{0}", firstname)});
                table7.AddRow(new string[] {
                            "lastname",
                            string.Format("{0}", lastname)});
#line 45
    await testRunner.WhenAsync("I request booking IDs with parameters", ((string)(null)), table7, "When ");
#line hidden
#line 49
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
