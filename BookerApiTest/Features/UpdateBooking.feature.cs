// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace BookerApiTest.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Update Booking API")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("UpdateBooking")]
    public partial class UpdateBookingAPIFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "UpdateBooking"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Update Booking API", "    As an API consumer\r\n    I want to update existing bookings\r\n    So I can modi" +
                "fy reservation details", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "UpdateBooking.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully update booking with valid data using token authentication")]
        [NUnit.Framework.CategoryAttribute("UpdateBooking")]
        [NUnit.Framework.CategoryAttribute("HappyPath")]
        public async global::System.Threading.Tasks.Task SuccessfullyUpdateBookingWithValidDataUsingTokenAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "UpdateBooking",
                    "HappyPath"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successfully update booking with valid data using token authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
    await testRunner.GivenAsync("I have a valid authentication token", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table8.AddRow(new string[] {
                            "James",
                            "Brown",
                            "111",
                            "true",
                            "2018-01-01",
                            "2019-01-01",
                            "Breakfast"});
#line 10
    await testRunner.WhenAsync("I update booking ID 1 with valid data using token authentication:", ((string)(null)), table8, "When ");
#line hidden
#line 13
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 14
    await testRunner.AndAsync("the response should match the updated booking data", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully update booking with valid data using Basic Auth")]
        [NUnit.Framework.CategoryAttribute("UpdateBooking")]
        [NUnit.Framework.CategoryAttribute("HappyPath")]
        public async global::System.Threading.Tasks.Task SuccessfullyUpdateBookingWithValidDataUsingBasicAuth()
        {
            string[] tagsOfScenario = new string[] {
                    "UpdateBooking",
                    "HappyPath"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successfully update booking with valid data using Basic Auth", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table9.AddRow(new string[] {
                            "Sarah",
                            "Smith",
                            "222",
                            "false",
                            "2023-01-01",
                            "2023-01-05",
                            "WiFi"});
#line 18
    await testRunner.WhenAsync("I update booking ID 1 with valid data using Basic Auth:", ((string)(null)), table9, "When ");
#line hidden
#line 21
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 22
    await testRunner.AndAsync("the response should match the updated booking data", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to update booking without authentication")]
        [NUnit.Framework.CategoryAttribute("UpdateBooking")]
        [NUnit.Framework.CategoryAttribute("Authentication")]
        public async global::System.Threading.Tasks.Task AttemptToUpdateBookingWithoutAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "UpdateBooking",
                    "Authentication"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Attempt to update booking without authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table10.AddRow(new string[] {
                            "James",
                            "Brown",
                            "111",
                            "true",
                            "2018-01-01",
                            "2019-01-01",
                            "Breakfast"});
#line 26
    await testRunner.WhenAsync("I update booking ID 1 with valid data without authentication:", ((string)(null)), table10, "When ");
#line hidden
#line 29
    await testRunner.ThenAsync("the response status code should be 403", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to update booking with invalid token")]
        [NUnit.Framework.CategoryAttribute("UpdateBooking")]
        [NUnit.Framework.CategoryAttribute("Authentication")]
        public async global::System.Threading.Tasks.Task AttemptToUpdateBookingWithInvalidToken()
        {
            string[] tagsOfScenario = new string[] {
                    "UpdateBooking",
                    "Authentication"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Attempt to update booking with invalid token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
    await testRunner.GivenAsync("I have an invalid authentication token", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table11.AddRow(new string[] {
                            "James",
                            "Brown",
                            "111",
                            "true",
                            "2018-01-01",
                            "2019-01-01",
                            "Breakfast"});
#line 34
    await testRunner.WhenAsync("I update booking ID 1 with valid data using token authentication:", ((string)(null)), table11, "When ");
#line hidden
#line 37
    await testRunner.ThenAsync("the response status code should be 403", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to update booking with invalid data")]
        [NUnit.Framework.CategoryAttribute("UpdateBooking")]
        [NUnit.Framework.CategoryAttribute("Validation")]
        [NUnit.Framework.TestCaseAttribute("", "Brown", "111", "true", "2018-01-01", "2019-01-01", "Breakfast", null)]
        [NUnit.Framework.TestCaseAttribute("James", "", "111", "true", "2018-01-01", "2019-01-01", "Breakfast", null)]
        [NUnit.Framework.TestCaseAttribute("James", "Brown", "-1", "true", "2018-01-01", "2019-01-01", "Breakfast", null)]
        [NUnit.Framework.TestCaseAttribute("James", "Brown", "111", "not_bool", "2018-01-01", "2019-01-01", "Breakfast", null)]
        [NUnit.Framework.TestCaseAttribute("James", "Brown", "111", "true", "invalid-date", "2019-01-01", "Breakfast", null)]
        [NUnit.Framework.TestCaseAttribute("James", "Brown", "111", "true", "2018-01-01", "invalid-date", "Breakfast", null)]
        [NUnit.Framework.TestCaseAttribute("James", "Brown", "111", "true", "2018-01-01", "2019-01-01", "", null)]
        public async global::System.Threading.Tasks.Task AttemptToUpdateBookingWithInvalidData(string first, string last, string price, string deposit, string checkin, string checkout, string needs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UpdateBooking",
                    "Validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("first", first);
            argumentsOfScenario.Add("last", last);
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("deposit", deposit);
            argumentsOfScenario.Add("checkin", checkin);
            argumentsOfScenario.Add("checkout", checkout);
            argumentsOfScenario.Add("needs", needs);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Attempt to update booking with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
    await testRunner.GivenAsync("I have a valid authentication token", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table12.AddRow(new string[] {
                            string.Format("{0}", first),
                            string.Format("{0}", last),
                            string.Format("{0}", price),
                            string.Format("{0}", deposit),
                            string.Format("{0}", checkin),
                            string.Format("{0}", checkout),
                            string.Format("{0}", needs)});
#line 42
    await testRunner.WhenAsync("I update booking ID 1 with the following invalid data:", ((string)(null)), table12, "When ");
#line hidden
#line 45
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
