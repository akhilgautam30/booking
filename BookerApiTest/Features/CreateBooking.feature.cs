// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace BookerApiTest.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create Booking")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("CreateBooking")]
    public partial class CreateBookingFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "CreateBooking"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Create Booking", "    As a user\r\n    I want to create a new booking\r\n    So that I can reserve a ro" +
                "om", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "CreateBooking.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a booking with valid data")]
        [NUnit.Framework.CategoryAttribute("GetBooking")]
        [NUnit.Framework.CategoryAttribute("HappyPath")]
        public async global::System.Threading.Tasks.Task CreateABookingWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "GetBooking",
                    "HappyPath"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a booking with valid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table1.AddRow(new string[] {
                            "Jim",
                            "Brown",
                            "111",
                            "true",
                            "2018-01-01",
                            "2019-01-01",
                            "Breakfast"});
#line 12
        await testRunner.WhenAsync("I send a POST request with the following valid booking data:", ((string)(null)), table1, "When ");
#line hidden
#line 15
        await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
        await testRunner.AndAsync("the response should contain a bookingid", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
        await testRunner.AndAsync("the response should match the request data", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a booking with missing required field")]
        [NUnit.Framework.CategoryAttribute("Validation")]
        [NUnit.Framework.TestCaseAttribute("firstname", null)]
        [NUnit.Framework.TestCaseAttribute("lastname", null)]
        [NUnit.Framework.TestCaseAttribute("totalprice", null)]
        [NUnit.Framework.TestCaseAttribute("depositpaid", null)]
        [NUnit.Framework.TestCaseAttribute("bookingdates", null)]
        public async global::System.Threading.Tasks.Task CreateABookingWithMissingRequiredField(string field, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("field", field);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a booking with missing required field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
        await testRunner.WhenAsync(string.Format("I send a POST request with booking data missing the {0} field", field), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
        await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a booking with invalid field values")]
        [NUnit.Framework.CategoryAttribute("Validation")]
        [NUnit.Framework.TestCaseAttribute("totalprice", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("totalprice", "\"invalid\"", null)]
        [NUnit.Framework.TestCaseAttribute("depositpaid", "\"notboolean\"", null)]
        [NUnit.Framework.TestCaseAttribute("bookingdates", "null", null)]
        [NUnit.Framework.TestCaseAttribute("bookingdates", "{}", null)]
        [NUnit.Framework.TestCaseAttribute("bookingdates", "{\"checkin\":\"invalid-date\",\"checkout\":\"2019-01-01\"}", null)]
        [NUnit.Framework.TestCaseAttribute("bookingdates", "{\"checkin\":\"2018-01-01\",\"checkout\":\"invalid-date\"}", null)]
        public async global::System.Threading.Tasks.Task CreateABookingWithInvalidFieldValues(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("field", field);
            argumentsOfScenario.Add("value", value);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a booking with invalid field values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
        await testRunner.WhenAsync(string.Format("I send a POST request with booking data where {0} is set to {1}", field, value), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
        await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a booking with empty additional needs")]
        [NUnit.Framework.CategoryAttribute("EdgeCases")]
        public async global::System.Threading.Tasks.Task CreateABookingWithEmptyAdditionalNeeds()
        {
            string[] tagsOfScenario = new string[] {
                    "EdgeCases"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a booking with empty additional needs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table2.AddRow(new string[] {
                            "Jim",
                            "Brown",
                            "111",
                            "true",
                            "2018-01-01",
                            "2019-01-01",
                            ""});
#line 50
        await testRunner.WhenAsync("I send a POST request with the following valid booking data:", ((string)(null)), table2, "When ");
#line hidden
#line 53
        await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 54
        await testRunner.AndAsync("the response should contain a bookingid", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
        await testRunner.AndAsync("the additionalneeds field should be empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a booking with minimum valid data")]
        [NUnit.Framework.CategoryAttribute("EdgeCases")]
        public async global::System.Threading.Tasks.Task CreateABookingWithMinimumValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "EdgeCases"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a booking with minimum valid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout"});
                table3.AddRow(new string[] {
                            "J",
                            "B",
                            "0",
                            "false",
                            "2018-01-01",
                            "2018-01-02"});
#line 59
        await testRunner.WhenAsync("I send a POST request with the following valid booking data:", ((string)(null)), table3, "When ");
#line hidden
#line 62
        await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 63
        await testRunner.AndAsync("the response should contain a bookingid", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a booking with maximum field lengths")]
        [NUnit.Framework.CategoryAttribute("EdgeCases")]
        public async global::System.Threading.Tasks.Task CreateABookingWithMaximumFieldLengths()
        {
            string[] tagsOfScenario = new string[] {
                    "EdgeCases"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a booking with maximum field lengths", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table4.AddRow(new string[] {
                            "ThisIsAVeryLongFirstNameThatExceedsNormalLimitsButShouldStillWorkForTheApi",
                            "ThisIsAVeryLongLastNameThatExceedsNormalLimitsButShouldStillWorkForTheApi",
                            "999999999",
                            "true",
                            "2018-01-01",
                            "2019-01-01",
                            "ThisIsAVeryLongAdditionalNeedsFieldThatExceedsNormalLimitsButShouldStillWorkForTh" +
                                "eApi"});
#line 67
        await testRunner.WhenAsync("I send a POST request with the following valid booking data:", ((string)(null)), table4, "When ");
#line hidden
#line 70
        await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 71
        await testRunner.AndAsync("the response should contain a bookingid", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
        await testRunner.AndAsync("the response should match the request data", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
